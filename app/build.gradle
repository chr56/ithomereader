apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'

apply from: 'config.gradle'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def signingConfigFile = rootProject.file("signing.properties")
def signingProperties = new Properties()
signingProperties.load(new FileInputStream(signingConfigFile))

android {
    namespace = "me.ikirby.ithomereader"
    compileSdk = 34
    buildToolsVersion = "34.0.0"

    signingConfigs {
        create("release") {
            keyAlias = signingProperties['keyAlias']
            keyPassword = signingProperties['keyPassword']
            storeFile = file(signingProperties['storeFile'])
            storePassword = signingProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId = "me.ikirby.ithomereader"
        minSdk = 23
        targetSdk = 34
        versionCode = 190
        versionName = "5.1.0-dev1"
        resConfigs("zh-rCN")
        versionNameSuffix = "-" + getGitHash()
    }
    buildTypes {
        named("release") {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            signingConfig(signingConfigs.release)
        }
        named("debug") {
            applicationIdSuffix = ".debug"
        }
        create("RC") {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            signingConfig(signingConfigs.release)
            applicationIdSuffix = ".rc"
            versionNameSuffix = "-rc"
        }
    }
    flavorDimensions = List.of("update")
    productFlavors {
        create("nornal") {
            dimension = "update"
            manifestPlaceholders = [updateUrl: updateUrl]
        }
        create("noupdate") {
            dimension = "update"
            versionNameSuffix = "-pub"
            manifestPlaceholders = [updateUrl: ""]
        }
    }
    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
        exclude("META-INF/CHANGES")
        exclude("META-INF/README.md")
        exclude("META-INF/LICENSE")
        exclude("META-INF/*.version")
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
}

dependencies {
    implementation(libs.kotlin.reflect)
    implementation(libs.kotlinx.coroutines)
    implementation(libs.androidx.core)
    implementation(libs.androidx.viewpager)
    implementation(libs.androidx.swiperefreshlayout)
    implementation(libs.androidx.fragment)
    implementation(libs.androidx.recyclerview)
    implementation(libs.androidx.preference)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.browser)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.google.material)
    implementation(libs.jsoup)
    implementation(libs.photoView)
    implementation(libs.coil)

    implementation(libs.okhttp3)
    implementation(libs.retrofit2.retrofit)
    implementation(libs.moshi.core)
    implementation(libs.moshi.kotlin)
    implementation(libs.moshi.adapters)
    implementation(libs.retrofit2.moshi)
    // debugImplementation(libs.leakcanary.android)
    // releaseImplementation(libs.leakcanary.androidNoOp)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}